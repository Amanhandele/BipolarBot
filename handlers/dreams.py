# handlers/dreams.py
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import asyncio, datetime, json, re
from openai import AsyncOpenAI
from typing import Optional
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from Token import AUTHORIZED_USER_IDS
from utils.storage import save_json
from utils import send_long

router = Router()


def _fmt_metrics(metrics: dict) -> str:
    """Return formatted metrics block for Telegram."""

    if not metrics:
        return ""

    lines = ["<b>–ú–µ—Ç—Ä–∏–∫–∏ —Å–Ω–∞</b>"]

    if metrics.get("intensity") is not None:
        lines.append(f"–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {metrics['intensity']}")

    emotions = metrics.get("emotions") or []
    if emotions:
        lines.append("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏:")
        lines.extend(emotions)

    return "\n\n" + "\n".join(lines)


# user_id ‚Üí {"msgs": list[str], "btn": int, "task": asyncio.Task, "date": str}
_active: dict[int, dict] = {}
_prompt_dates: dict[int, str] = {}
TIMEOUT = 900  # 15 –º–∏–Ω—É—Ç

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def register_prompt(uid: int, date_iso: Optional[str] = None) -> None:
    """Remember when the bot asked to record a dream."""
    if date_iso is None:
        date_iso = datetime.date.today().isoformat()
    _prompt_dates[uid] = date_iso


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def dream_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω", callback_data="dream_write")
    kb.button(text="–ù–µ –∑–∞–ø–æ–º–Ω–∏–ª",      callback_data="dream_none")
    kb.button(text="–õ–µ–Ω—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å",  callback_data="dream_lazy")
    kb.button(text="–ü–æ–º–Ω—é —É—Ä—ã–≤–∫–∞–º–∏",   callback_data="dream_frag")
    kb.adjust(1)
    return kb.as_markup()


async def _timeout(uid: int, bot: Bot):
    await asyncio.sleep(TIMEOUT)
    if uid in _active:
        await _finish(uid, bot)


async def start_record(bot: Bot, uid: int, date_iso: Optional[str] = None):
    if date_iso is None:
        date_iso = _prompt_dates.pop(uid, datetime.date.today().isoformat())
    kb = InlineKeyboardBuilder()
    kb.button(text="üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="dream_end")
    msg = await bot.send_message(uid, "–ó–∞–ø–∏—Å—ã–≤–∞—é —Å–æ–Ω‚Ä¶", reply_markup=kb.as_markup())
    task = asyncio.create_task(_timeout(uid, bot))
    _active[uid] = {"msgs": [], "btn": msg.message_id, "task": task, "date": date_iso}


async def _finish(uid: int, bot: Bot):
    info = _active.pop(uid, None)
    if not info:
        return
    if info["task"]:
        info["task"].cancel()
    try:
        await bot.delete_message(uid, info["btn"])
    except Exception:
        pass
    text = "\n".join(info["msgs"]).strip()
    if text:
        analysis, metrics = await _commit(uid, text, info["date"])
        await send_long(
            bot,
            uid,
            f"üåì –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞:\n{analysis}{_fmt_metrics(metrics)}",
        )
        from handlers.manage import main_kb
        await bot.send_message(uid, "–ú–µ–Ω—é:", reply_markup=main_kb())
    else:
        payload = {"dream": "", "analysis": "", "metrics": {}, "date": info["date"]}
        save_json(uid, "dreams", "dream", payload)
        await bot.send_message(uid, "–°–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–ø—É—Å—Ç–æ).")
        from handlers.manage import main_kb
        await bot.send_message(uid, "–ú–µ–Ω—é:", reply_markup=main_kb())


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GPT-–∞–Ω–∞–ª–∏–∑ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def analyze(text: str) -> str:
    """Return GPT analysis with metrics line."""
    try:
        from Token import OPENAI_API_KEY
        if not OPENAI_API_KEY:
            raise Exception("–§–∏—á–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–Ω–æ–≤ —á–µ—Ä–µ–∑ —á–∞—Ç–≥–ø—Ç –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        from config import CIM_EMOTIONS

        emotions = ", ".join(CIM_EMOTIONS)
        prompt = (
            "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω –ø–æ –Æ–Ω–≥—É –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown, —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è Telegram."
            "–í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –Ω–∞–ø–∏—à–∏ 'METRICS: '{\"intensity\": <0.5-3>, \"emotions\":[...]}'."
            "–î–ª—è —Ä–∞—Å—á—ë—Ç–∞ CIM-–∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—á–∏—Å–ª–∏ —ç–º–æ—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞: "
            f"{emotions}. "
        )

        client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        resp = await client.chat.completions.create(
            model="gpt-4o",

            messages=[{"role": "system", "content": prompt}, {"role": "user", "content": text}],
            max_tokens=3500,
            temperature=0.7,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"(–æ—à–∏–±–∫–∞ OpenAI: {e})"


async def _commit(uid: int, dream_txt: str, date_iso: Optional[str] = None):
    metrics = {}
    analysis = ""
    raw = ""
    if dream_txt.strip():
        raw = await analyze(dream_txt)
        analysis = raw
        m = re.search(r"METRICS:\s*(['\"])?(\{.*\})(?:\1)?", raw, re.S)
        if m:
            json_str = m.group(2)

            try:
                metrics = json.loads(json_str)
            except Exception:
                metrics = {}
            analysis = raw[: m.start()].strip()
        else:
            analysis = re.sub(r"METRICS:.*", "", raw, flags=re.S).strip()

    intensity = metrics.get("intensity")
    emotions = metrics.get("emotions") or []
    if intensity and emotions:
        from config import EMOTION_COEFF
        coeffs = [EMOTION_COEFF.get(e.lower(), 0) for e in emotions]
        if coeffs:
            e_val = sum(coeffs) / len(coeffs)
            metrics["cim_score"] = round(float(intensity) * e_val, 2)

    if not date_iso:
        date_iso = datetime.date.today().isoformat()
    payload = {
        "dream": dream_txt,
        "analysis": analysis,
        "metrics": metrics,
        "date": date_iso,
    }
    save_json(uid, "dreams", "dream", payload)
    return analysis, metrics


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–º–∞–Ω–¥—ã /dream –∏ –∫–Ω–æ–ø–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("dream"))
async def cmd_dream(msg: types.Message):
    if msg.from_user.id not in AUTHORIZED_USER_IDS:
        return
    text = msg.text.replace("/dream", "", 1).strip()
    if text:
        analysis, metrics = await _commit(msg.from_user.id, text, None)
        await send_long(
            msg.bot,
            msg.chat.id,
            f"üåì –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞:\n{analysis}{_fmt_metrics(metrics)}",
            reply_to_message_id=msg.message_id,
        )
        from handlers.manage import main_kb
        await msg.answer("–ú–µ–Ω—é:", reply_markup=main_kb())
    else:
        await msg.reply("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=dream_kb())
        await start_record(msg.bot, msg.from_user.id)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏, –∫—Ä–æ–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
@router.callback_query(lambda c: c.data.startswith("dream_") and c.data != "dream_end")
async def dream_buttons(cq: types.CallbackQuery, bot: Bot):
    uid = cq.from_user.id
    if uid not in AUTHORIZED_USER_IDS:
        await cq.answer(); return

    code = cq.data
    if code == "dream_write":
        await start_record(bot, uid)
        await cq.message.edit_text("–ñ–¥—É —Ç–µ–∫—Å—Ç —Å–Ω–∞‚Ä¶")
        await cq.answer()
        return

    label_map = {
        "dream_none": "–ù–µ –∑–∞–ø–æ–º–Ω–∏–ª —Å–æ–Ω",
        "dream_lazy": "–õ–µ–Ω—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å",
        "dream_frag": "–ü–æ–º–Ω—é —É—Ä—ã–≤–∫–∞–º–∏",
    }
    label = label_map.get(code, code)
    info = _active.pop(uid, None)
    if info:
        date_iso = info.get("date")
    else:
        date_iso = _prompt_dates.pop(uid, datetime.date.today().isoformat())
    payload = {"dream": label, "analysis": "(–Ω–µ—Ç)", "metrics": {}, "date": date_iso}
    save_json(uid, "dreams", "dream", payload)
    await cq.message.edit_text(f"üìë –ó–∞–ø–∏—Å–∞–ª: {label}")
    from handlers.manage import main_kb
    await cq.message.answer("–ú–µ–Ω—é:", reply_markup=main_kb())
    await cq.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ñ–∏–∫—Å–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ —Å–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(lambda m: m.from_user.id in _active)
async def collect_dream(msg: types.Message):
    info = _active.get(msg.from_user.id)
    if not info:
        return
    info["msgs"].append(msg.text)
    if info["task"]:
        info["task"].cancel()
    try:
        await msg.bot.delete_message(msg.chat.id, info["btn"])
    except Exception:
        pass
    kb = InlineKeyboardBuilder()
    kb.button(text="üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="dream_end")
    new = await msg.answer("–ó–∞–ø–∏—Å—ã–≤–∞—é —Å–æ–Ω‚Ä¶", reply_markup=kb.as_markup())
    info["btn"] = new.message_id
    info["task"] = asyncio.create_task(_timeout(msg.from_user.id, msg.bot))


@router.callback_query(lambda c: c.data == "dream_end")
async def end_dream(cq: types.CallbackQuery, bot: Bot):
    await _finish(cq.from_user.id, bot)
    await cq.answer()
