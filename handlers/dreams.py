# handlers/dreams.py
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import asyncio, datetime, json, re
from openai import AsyncOpenAI
from typing import Optional
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from Token import AUTHORIZED_USER_IDS
from utils.storage import save_jsonl

router = Router()


# user_id ‚Üí date (None = —Å–µ–≥–æ–¥–Ω—è)
_waiting: dict[int, str] = {}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def dream_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω", callback_data="dream_write")
    kb.button(text="–ù–µ –∑–∞–ø–æ–º–Ω–∏–ª",      callback_data="dream_none")
    kb.button(text="–õ–µ–Ω—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å",  callback_data="dream_lazy")
    kb.button(text="–ü–æ–º–Ω—é —É—Ä—ã–≤–∫–∞–º–∏",   callback_data="dream_frag")
    kb.adjust(1)
    return kb.as_markup()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GPT-–∞–Ω–∞–ª–∏–∑ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def analyze(text: str) -> str:
    try:
        from Token import OPENAI_API_KEY
        if not OPENAI_API_KEY:
            raise Exception("–§–∏—á–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–Ω–æ–≤ —á–µ—Ä–µ–∑ —á–∞—Ç–≥–ø—Ç –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω –ø–æ –Æ–Ω–≥—É. "
                        "–í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –≤—ã–≤–µ–¥–∏ JSON –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å –∫–ª—é—á–∞–º–∏ "
                        "intensity (0.5-3) –∏ emotions (—Å–ø–∏—Å–æ–∫ —ç–º–æ—Ü–∏–π)."
                    ),
                },
                {"role": "user", "content": text},
            ],
            max_tokens=3500,
            temperature=0.7,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"(–æ—à–∏–±–∫–∞ OpenAI: {e})"


async def _commit(uid: int, dream_txt: str, date_iso: Optional[str] = None):
    raw = await analyze(dream_txt)
    metrics = {}
    analysis = raw
    m = re.search(r"\{.*\}", raw, re.S)
    if m:
        json_str = m.group()
        try:
            metrics = json.loads(json_str)
        except Exception:
            metrics = {}
        analysis = raw[: m.start()].strip()

    intensity = metrics.get("intensity")
    emotions = metrics.get("emotions") or []
    if intensity and emotions:
        from config import EMOTION_COEFF
        coeffs = [EMOTION_COEFF.get(e.lower(), 0) for e in emotions]
        if coeffs:
            e_val = sum(coeffs) / len(coeffs)
            metrics["cim_score"] = round(float(intensity) * e_val, 2)

    if not date_iso:
        date_iso = datetime.date.today().isoformat()
    payload = {
        "dream": dream_txt,
        "analysis": analysis,
        "metrics": metrics,
        "date": date_iso,
    }
    save_jsonl(uid, "dreams", "dream", payload)
    return analysis, metrics


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–º–∞–Ω–¥—ã /dream –∏ –∫–Ω–æ–ø–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("dream"))
async def cmd_dream(msg: types.Message):
    if msg.from_user.id not in AUTHORIZED_USER_IDS:
        return
    text = msg.text.replace("/dream", "", 1).strip()
    if text:
        analysis, metrics = await _commit(msg.from_user.id, text, None)
        extra = []
        if metrics.get("cim_score") is not None:
            extra.append(f"CIM-score: {metrics['cim_score']}")
        if metrics.get("intensity") is not None:
            extra.append(f"I: {metrics['intensity']}")
        if metrics.get("emotions"):
            extra.append("—ç–º–æ—Ü–∏–∏: " + ", ".join(metrics["emotions"]))
        addon = "\n\n" + ", ".join(extra) if extra else ""
        await msg.reply(f"üåì –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞:\n{analysis}{addon}")
    else:
        # —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        _waiting[msg.from_user.id] = None
        await msg.reply("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=dream_kb())


@router.callback_query(lambda c: c.data.startswith("dream_"))
async def dream_buttons(cq: types.CallbackQuery):
    uid = cq.from_user.id
    if uid not in AUTHORIZED_USER_IDS:
        await cq.answer(); return

    code = cq.data
    if code == "dream_write":
        _waiting[uid] = None          # –∂–¥—ë–º —Ç–µ–∫—Å—Ç
        await cq.message.edit_text("–ñ–¥—É —Ç–µ–∫—Å—Ç —Å–Ω–∞‚Ä¶")
        await cq.answer()
        return

    label_map = {
        "dream_none": "–ù–µ –∑–∞–ø–æ–º–Ω–∏–ª —Å–æ–Ω",
        "dream_lazy": "–õ–µ–Ω—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å",
        "dream_frag": "–ü–æ–º–Ω—é —É—Ä—ã–≤–∫–∞–º–∏",
    }
    label = label_map.get(code, code)
    save_jsonl(uid, "dreams", "dream", {"dream": label, "analysis": "(–Ω–µ—Ç)"})
    _waiting.pop(uid, None)
    await cq.message.edit_text(f"üìë –ó–∞–ø–∏—Å–∞–ª: {label}")
    await cq.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∂–¥—ë–º —Å–æ–Ω ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(lambda m: m.from_user.id in _waiting)
async def catch_dream(msg: types.Message):
    uid = msg.from_user.id
    date_iso = _waiting.pop(uid)
    analysis, metrics = await _commit(uid, msg.text, date_iso)
    extra = []
    if metrics.get("cim_score") is not None:
        extra.append(f"CIM-score: {metrics['cim_score']}")
    if metrics.get("intensity") is not None:
        extra.append(f"I: {metrics['intensity']}")
    if metrics.get("emotions"):
        extra.append("—ç–º–æ—Ü–∏–∏: " + ", ".join(metrics["emotions"]))
    addon = "\n\n" + ", ".join(extra) if extra else ""
    await msg.reply(f"üåì –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞:\n{analysis}{addon}")
